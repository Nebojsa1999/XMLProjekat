// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: posting_service/posting_service.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostingServiceClient is the client API for PostingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostingServiceClient interface {
	GetPostFromUser(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAllPosts(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllPostsFromUser(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	CreatePost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostResponse, error)
	CreateComment(ctx context.Context, in *CommentOnPostRequest, opts ...grpc.CallOption) (*CommentOnPostResponse, error)
	InsertLikeOrDislike(ctx context.Context, in *LikeOrDislikePostRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type postingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostingServiceClient(cc grpc.ClientConnInterface) PostingServiceClient {
	return &postingServiceClient{cc}
}

func (c *postingServiceClient) GetPostFromUser(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/post.PostingService/GetPostFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postingServiceClient) GetAllPosts(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/post.PostingService/GetAllPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postingServiceClient) GetAllPostsFromUser(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/post.PostingService/GetAllPostsFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postingServiceClient) CreatePost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostResponse, error) {
	out := new(NewPostResponse)
	err := c.cc.Invoke(ctx, "/post.PostingService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postingServiceClient) CreateComment(ctx context.Context, in *CommentOnPostRequest, opts ...grpc.CallOption) (*CommentOnPostResponse, error) {
	out := new(CommentOnPostResponse)
	err := c.cc.Invoke(ctx, "/post.PostingService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postingServiceClient) InsertLikeOrDislike(ctx context.Context, in *LikeOrDislikePostRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/post.PostingService/InsertLikeOrDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostingServiceServer is the server API for PostingService service.
// All implementations must embed UnimplementedPostingServiceServer
// for forward compatibility
type PostingServiceServer interface {
	GetPostFromUser(context.Context, *GetPostRequest) (*GetResponse, error)
	GetAllPosts(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetAllPostsFromUser(context.Context, *GetRequest) (*GetAllResponse, error)
	CreatePost(context.Context, *NewPostRequest) (*NewPostResponse, error)
	CreateComment(context.Context, *CommentOnPostRequest) (*CommentOnPostResponse, error)
	InsertLikeOrDislike(context.Context, *LikeOrDislikePostRequest) (*GetResponse, error)
	mustEmbedUnimplementedPostingServiceServer()
}

// UnimplementedPostingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostingServiceServer struct {
}

func (UnimplementedPostingServiceServer) GetPostFromUser(context.Context, *GetPostRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostFromUser not implemented")
}
func (UnimplementedPostingServiceServer) GetAllPosts(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPosts not implemented")
}
func (UnimplementedPostingServiceServer) GetAllPostsFromUser(context.Context, *GetRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPostsFromUser not implemented")
}
func (UnimplementedPostingServiceServer) CreatePost(context.Context, *NewPostRequest) (*NewPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostingServiceServer) CreateComment(context.Context, *CommentOnPostRequest) (*CommentOnPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPostingServiceServer) InsertLikeOrDislike(context.Context, *LikeOrDislikePostRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLikeOrDislike not implemented")
}
func (UnimplementedPostingServiceServer) mustEmbedUnimplementedPostingServiceServer() {}

// UnsafePostingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostingServiceServer will
// result in compilation errors.
type UnsafePostingServiceServer interface {
	mustEmbedUnimplementedPostingServiceServer()
}

func RegisterPostingServiceServer(s grpc.ServiceRegistrar, srv PostingServiceServer) {
	s.RegisterService(&PostingService_ServiceDesc, srv)
}

func _PostingService_GetPostFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServiceServer).GetPostFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostingService/GetPostFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServiceServer).GetPostFromUser(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostingService_GetAllPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServiceServer).GetAllPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostingService/GetAllPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServiceServer).GetAllPosts(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostingService_GetAllPostsFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServiceServer).GetAllPostsFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostingService/GetAllPostsFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServiceServer).GetAllPostsFromUser(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostingService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostingService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServiceServer).CreatePost(ctx, req.(*NewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostingService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentOnPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostingService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServiceServer).CreateComment(ctx, req.(*CommentOnPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostingService_InsertLikeOrDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeOrDislikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostingServiceServer).InsertLikeOrDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.PostingService/InsertLikeOrDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostingServiceServer).InsertLikeOrDislike(ctx, req.(*LikeOrDislikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostingService_ServiceDesc is the grpc.ServiceDesc for PostingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostingService",
	HandlerType: (*PostingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostFromUser",
			Handler:    _PostingService_GetPostFromUser_Handler,
		},
		{
			MethodName: "GetAllPosts",
			Handler:    _PostingService_GetAllPosts_Handler,
		},
		{
			MethodName: "GetAllPostsFromUser",
			Handler:    _PostingService_GetAllPostsFromUser_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostingService_CreatePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _PostingService_CreateComment_Handler,
		},
		{
			MethodName: "InsertLikeOrDislike",
			Handler:    _PostingService_InsertLikeOrDislike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posting_service/posting_service.proto",
}
