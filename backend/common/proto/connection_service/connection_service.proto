syntax = "proto3";

option go_package = "github.com/Nebojsa1999/XMLProjekat/backend/common/connection";

package connection;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service ConnectionService{
  rpc Get(GetRequest) returns(GetResponse) {
    option (google.api.http) = {
      get: "/connection/{id}"
    };
  }
  rpc GetAll(GetAllRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection"
    };
  }
  rpc GetConnectionOfFollowingType(GetRequest) returns(GetResponse) {
    option (google.api.http) = {
      get: "/connection/following-type/{id}"
    };
  }
  rpc GetAllConnectionsOfFollowingType(GetAllRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/following-type"
    };
  }
  rpc GetConnectionOfBlockingType(GetRequest) returns(GetResponse) {
    option (google.api.http) = {
      get: "/connection/blocking-type/{id}"
    };
  }
  rpc GetAllConnectionsOfBlockingType(GetAllRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/blocking-type"
    };
  }
  rpc GetByUserId(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/{userId}"
    };
  }
  rpc GetConnectionsOfFollowingTypeByUserId(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/following-type/{userId}"
    };
  }
  rpc GetConnectionsOfBlockingTypeByUserId(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/blocking-type/{userId}"
    };
  }
  rpc GetFollowingByUserId(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/following-type/{userId}/following"
    };
  }
  rpc GetFollowersByUserId(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/following-type/{userId}/followers"
    };
  }
  rpc GetConnectionsInWhichTheGivenUserIsBlocker(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/blocking-type/{userId}/as-blocker"
    };
  }
  rpc GetConnectionsInWhichTheGivenUserIsBlockedOne(GetByUserIdRequest) returns(GetMultipleResponse) {
    option (google.api.http) = {
      get: "/connection/blocking-type/{userId}/as-blocked-one"
    };
  }
  rpc GetFollowingUsersIds(GetByUserIdRequest) returns(GetFollowingUsersIdsResponse) {
    option (google.api.http) = {
      get: "/connection/following-type/{userId}/following-users-ids"
    };
  }
  rpc Create(CreateRequest) returns(CreateResponse) {
    option (google.api.http) = {
      post: "/connection",
      body: "connection"
    };
  }
  rpc Update(UpdateRequest) returns(UpdateResponse) {
    option (google.api.http) = {
      put: "/connection",
      body: "connectionUpdateDTO"
    };
  }
  rpc Delete(DeleteRequest) returns(DeleteResponse) {
    option (google.api.http) = {
      delete: "/connection"
    };
  }
}

message GetRequest {
  string id = 1;
}

message GetAllRequest {
}

message GetResponse {
  Connection connection = 1;
}

message GetByUserIdRequest {
  string userId = 1;
}

message GetMultipleResponse {
  repeated Connection connections = 1;
}

message GetFollowingUsersIdsResponse {
  repeated string ids = 1;
}

message CreateRequest {
  Connection connection = 1;
}

message CreateResponse {
  Connection connection = 1;
}

message UpdateRequest {
  ConnectionUpdateDTO connectionUpdateDTO = 1;
}

message UpdateResponse {
  Connection connection = 1;
}

message DeleteRequest {
  string issuerId = 2;
  string subjectId = 3;
}

message DeleteResponse {
}

enum TypeOfConnection {
  UndefinedTypeOfConnection = 0;
  Following = 1;
  Blocking = 2;
}

message Connection {
  string id = 1;
  TypeOfConnection type = 2;
  string issuerId = 3;
  string subjectId = 4;
  google.protobuf.Timestamp date = 5;
  bool isApproved = 6;
}

message ConnectionUpdateDTO {
  TypeOfConnection type = 1;
  string issuerId = 2;
  string subjectId = 3;
  bool isApproved = 4;
}
